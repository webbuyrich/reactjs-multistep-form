{"version":3,"sources":["components/FormUserDetails.js","components/FormPersonalDetails.js","components/Confirm.js","components/Success.js","components/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["FormUserDetails","continue","e","preventDefault","props","nextStep","this","values","handleChange","Container","Alert","variant","Heading","Form","Group","controlId","Label","Control","type","onChange","defaultValue","firstName","placeholder","lastName","email","Text","className","Button","onClick","Component","FormPersonalDetails","back","prevStep","occupation","city","as","rows","bio","ButtonGroup","Confirm","Card","style","width","Body","Title","Jumbotron","UserForm","state","step","setState","input","target","value","Success","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b51c152.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Button, Form, Alert  } from 'react-bootstrap';\r\n\r\nexport class FormUserDetails extends Component {\r\n    continue = e => {\r\n        e.preventDefault();\r\n        this.props.nextStep();\r\n    }\r\n\r\n    render() {\r\n        // values variable\r\n        const { values, handleChange } = this.props;\r\n        \r\n        return (\r\n            <Container>\r\n                <Alert variant=\"success\">\r\n                    <Alert.Heading>Enter User Details</Alert.Heading>                    \r\n                </Alert>\r\n                <Form>\r\n                    <Form.Group controlId=\"firstName\">\r\n                        <Form.Label>First Name</Form.Label>\r\n                        <Form.Control \r\n                            type=\"text\" \r\n                            onChange={handleChange('firstName')} \r\n                            defaultValue={values.firstName}\r\n                            placeholder=\"Enter first name\" \r\n                        />                        \r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"lastName\">\r\n                        <Form.Label>Last Name</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={handleChange('lastName')}\r\n                            defaultValue={values.lastName}\r\n                            placeholder=\"Enter first name\" \r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Email address</Form.Label>\r\n                        <Form.Control \r\n                            type=\"email\" \r\n                            placeholder=\"Enter your email\" \r\n                            onChange={handleChange('email')}\r\n                            defaultValue={values.email}\r\n                        />\r\n                        <Form.Text className=\"text-muted\">\r\n                            We'll never share your email with anyone else.\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                    <Button \r\n                        variant=\"primary\" \r\n                        type=\"submit\"\r\n                        onClick={this.continue}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </Container>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default FormUserDetails\r\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Button, Form, Alert, ButtonGroup, Nav } from 'react-bootstrap';\r\n\r\nexport class FormPersonalDetails extends Component {\r\n    continue = e => {\r\n        e.preventDefault();\r\n        this.props.nextStep();\r\n    }\r\n\r\n    back = e => {\r\n        e.preventDefault();\r\n        this.props.prevStep();\r\n    }\r\n\r\n\r\n    render() {\r\n        // values variable\r\n        const { values, handleChange } = this.props;\r\n\r\n        return (\r\n            <Container>\r\n                <Alert variant=\"success\">\r\n                    <Alert.Heading>Enter Personal Details</Alert.Heading>\r\n                </Alert>\r\n                <Form>\r\n                    <Form.Group controlId=\"occupation\">\r\n                        <Form.Label>Occupation</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={handleChange('occupation')}\r\n                            defaultValue={values.occupation}\r\n                            placeholder=\"Enter occupation\"\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"city\">\r\n                        <Form.Label>City</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={handleChange('city')}\r\n                            defaultValue={values.city}\r\n                            placeholder=\"Enter city\"\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"bio\">\r\n                        <Form.Label>Bio</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows=\"3\"\r\n                            placeholder=\"Enter your bio\"\r\n                            onChange={handleChange('bio')}\r\n                            defaultValue={values.bio}\r\n                        />\r\n                        \r\n                    </Form.Group>\r\n                    <ButtonGroup>\r\n                        <Button\r\n                            variant=\"primary\"\r\n                            type=\"submit\"\r\n                            onClick={this.continue}\r\n                        >\r\n                            Continue\r\n                    </Button>\r\n                        <Button\r\n                            variant=\"warning\"\r\n                            type=\"submit\"\r\n                            onClick={this.back}\r\n                        >\r\n                            Back\r\n                    </Button>\r\n                    </ButtonGroup>\r\n                    \r\n                </Form>\r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default FormPersonalDetails\r\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Button, ButtonGroup, Alert, Card, ListGroup, ListGroupItem } from 'react-bootstrap';\r\n\r\nexport class Confirm extends Component {\r\n    continue = e => {\r\n        e.preventDefault();\r\n        this.props.nextStep();\r\n    }\r\n    \r\n    back = e => {\r\n        e.preventDefault();\r\n        this.props.prevStep();\r\n    }\r\n\r\n    render() {\r\n        // values variable\r\n        const { values, handleChange } = this.props;\r\n\r\n        return (\r\n            <Container>\r\n                <Alert variant=\"success\">\r\n                    <Alert.Heading>Confirmation Details</Alert.Heading>\r\n                </Alert>\r\n                <p>\r\n                    <Card style={{ width: '18rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>Name:</Card.Title>\r\n                            <Card.Text>\r\n                                {values.firstName + \" \"} {values.lastName}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </p>\r\n                <p>\r\n                    <Card style={{ width: '18rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>Eamil:</Card.Title>\r\n                            <Card.Text>\r\n                                {values.email}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </p>\r\n                <p>\r\n                    <Card style={{ width: '18rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>Occupation:</Card.Title>\r\n                            <Card.Text>\r\n                                {values.occupation}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </p>\r\n                <p>\r\n                    <Card style={{ width: '18rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>City:</Card.Title>\r\n                            <Card.Text>\r\n                                {values.city}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </p>\r\n                <p>\r\n                    <Card style={{ width: '18rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>Bio:</Card.Title>\r\n                            <Card.Text>\r\n                                {values.bio}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </p>\r\n                \r\n                \r\n                    <ButtonGroup>\r\n                        <Button\r\n                            variant=\"primary\"\r\n                            type=\"submit\"\r\n                            onClick={this.continue}\r\n                        >\r\n                            Confirm\r\n                    </Button>\r\n                        <Button\r\n                            variant=\"warning\"\r\n                            type=\"submit\"\r\n                            onClick={this.back}\r\n                        >\r\n                            Back\r\n                    </Button>\r\n                    </ButtonGroup>\r\n               \r\n                \r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Confirm\r\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Jumbotron, Button } from 'react-bootstrap';\r\n\r\nexport class Confirm extends Component {\r\n    \r\n\r\n\r\n    \r\n    \r\n    render() {\r\n\r\n        return (\r\n            <Container>\r\n                <Jumbotron>\r\n                    <h1>Confirmation Success</h1>\r\n                    <p>\r\n                        We have received your submission and you will receive an email from us shortly!\r\n                    </p>\r\n                    \r\n                </Jumbotron> \r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Confirm\r\n","import React, { Component } from 'react'\r\nimport FormUserDetails from './FormUserDetails'\r\nimport FormPersonalDetails from './FormPersonalDetails'\r\nimport Confirm from './Confirm'\r\nimport Success from './Success'\r\n\r\nexport class UserForm extends Component {\r\n    state = {\r\n        step: 1,\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        occupation: '',\r\n        city: '',\r\n        bio: ''\r\n    }\r\n\r\n    // Method to proceed to next step\r\n    nextStep = () => {\r\n        const { step } = this.state;\r\n        this.setState({\r\n            step: step + 1\r\n        })\r\n    }\r\n\r\n    // Go back to prev step\r\n    prevStep = () => {\r\n        const { step } = this.state;\r\n        this.setState({\r\n            step: step - 1\r\n        })\r\n    }\r\n\r\n    // Handle the field change\r\n    handleChange = input => e => {\r\n        this.setState({[input]: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        // destructuring the state\r\n        const { step } = this.state;\r\n        const { firstName, lastName, email, occupation, city, bio } =  this.state;\r\n        const values = { firstName, lastName, email, occupation, city, bio }\r\n\r\n        switch(step){\r\n            case 1:\r\n                return(\r\n                    <FormUserDetails \r\n                        nextStep={this.nextStep}\r\n                        handleChange={this.handleChange}\r\n                        values={values}\r\n                    />\r\n                )\r\n            case 2:\r\n                return(\r\n                    <FormPersonalDetails\r\n                        nextStep={this.nextStep}\r\n                        prevStep={this.prevStep}\r\n                        handleChange={this.handleChange}\r\n                        values={values}\r\n                    />\r\n                )         \r\n            case 3:\r\n                return(\r\n                    <Confirm\r\n                        nextStep={this.nextStep}\r\n                        prevStep={this.prevStep}\r\n                        handleChange={this.handleChange}\r\n                        values={values}\r\n                    />    \r\n                )\r\n            case 4:\r\n                return(\r\n                    <Success />\r\n                )\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default UserForm\r\n","import React from 'react';\nimport './App.css';\nimport UserForm from './components/UserForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}